{
  "version": 3,
  "sources": ["../../react-spin-game/src/react-spin-game.tsx"],
  "sourcesContent": ["import React, {\n  useRef,\n  useState,\n  useLayoutEffect,\n  forwardRef,\n  useImperativeHandle\n} from 'react'\nimport { ReactComponent as Arrow } from './Images/wheel-arrow.svg'\nimport Styles from './styles.module.css'\n\n\ninterface SpinGameData {\n  data: Array<Array<string>>\n  hideButton?: boolean\n  result?: string\n  time?: number\n  minTime?: number\n  maxTime?: number\n  removeButtonEffect?: boolean\n  fontSize?: number\n  fontFamily?: string\n  horizantalText?: boolean\n}\n\nconst SpinAndWin = forwardRef(\n  (\n    {\n      data,\n      hideButton,\n      result,\n      time,\n      minTime,\n      maxTime,\n      removeButtonEffect,\n      fontSize,\n      fontFamily,\n      horizantalText,\n    }: SpinGameData,\n    ref\n  ) => {\n    interface stateInfo {\n      winnerAngle: number\n    }\n    const wheelRef = useRef<any>()\n    const [state] = useState<stateInfo>({ winnerAngle: 0 })\n    useLayoutEffect(() => {\n      var wheelCanvas = document.getElementById('wheel')\n      if (wheelCanvas && isCanvas(wheelCanvas)) {\n        var wheel = wheelCanvas.getContext('2d')\n        var wheelX = wheelCanvas.width / 2\n        var wheelY = wheelCanvas.height / 2\n        var wheelRadius = Math.min(wheelX, wheelY)\n\n        drawWheel(data, wheel, wheelX, wheelY, wheelRadius)\n      }\n    }, [data])\n    function isCanvas(\n      obj: HTMLCanvasElement | HTMLElement\n    ): obj is HTMLCanvasElement {\n      return obj.tagName === 'CANVAS'\n    }\n    const degToRad = (deg: number) => {\n      return (deg * Math.PI) / 180.0\n    }\n    const drawWheel = (\n      list: Array<Array<string>>,\n      wheel: any,\n      wheelX: number,\n      wheelY: number,\n      wheelRadius: number\n    ) => {\n      var segment = 360 / list.length\n\n      list.map((el: Array<string>, i: number) => {\n        wheel.save()\n        wheel.translate(wheelX, wheelY)\n        wheel.rotate(degToRad(segment * i))\n        wheel.translate(-wheelX, -wheelY)\n\n        wheel.fillStyle = el[1] ? el[1] : 'red'\n\n        wheel.beginPath()\n        wheel.moveTo(wheelX, wheelY)\n        wheel.arc(\n          wheelX,\n          wheelY,\n          wheelRadius,\n          0 - degToRad(90) - degToRad(segment / 2),\n          degToRad(segment) - degToRad(90) - degToRad(segment / 2),\n          false\n        )\n        wheel.moveTo(wheelX, wheelY)\n        wheel.fill()\n\n        wheel.fillStyle = 'white'\n        horizantalText ? (wheel.textAlign = 'start') : (wheel.textAlign = 'end')\n        wheel.font =\n          fontSize && fontFamily\n            ? `${fontSize}px ${fontFamily}`\n            : fontSize\n            ? `${fontSize}px sans-serif`\n            : fontFamily\n            ? `18px ${fontFamily}`\n            : '18px sans-serif'\n        wheel.transform = 'translate(50px, 100px)'\n        if (horizantalText) {\n          wheel.textAlign = 'center'\n          wheel.fillText(el[0], wheelX, wheelY / 4)\n        } else {\n          wheel.rotate(-1.57)\n          wheel.fillText(el[0], -20, wheelY + 10)\n        }\n\n        wheel.restore()\n      })\n    }\n    useImperativeHandle(ref, () => ({\n      handleSpin() {\n        let wheelCanvas = document.getElementById('wheel')\n        if (wheelCanvas) {\n          const freeSpinResult = result ? result : '23454'\n          let transitionTime = time\n            ? time\n            : minTime && maxTime && minTime > 0 && maxTime > 0\n            ? Math.floor(Math.random() * (maxTime - minTime + 1)) + minTime\n            : Math.floor(Math.random() * (4 - 3 + 1)) + 3\n          wheelCanvas.style.transition = transitionTime + 's'\n\n          let winner = data.find((item: Array<string>) => {\n            return item[0] === freeSpinResult\n          })\n          if (!winner) {\n            winner = ['']\n          }\n          let freeSpinGifts: Array<string> = []\n          data.map((item: Array<string>) => {\n            freeSpinGifts.push(item[0])\n          })\n          let winnerIndex = freeSpinGifts.indexOf(winner[0])\n          let offset = state.winnerAngle % 360\n          state.winnerAngle =\n            state.winnerAngle +\n            1800 -\n            (360 * winnerIndex) / freeSpinGifts.length -\n            offset\n          let deg = 'rotate(' + state.winnerAngle + 'deg)'\n          wheelCanvas.style.transform = deg\n        }\n      }\n    }))\n    const handleSpin = () => {\n      let wheelCanvas = document.getElementById('wheel')\n      if (wheelCanvas) {\n        const freeSpinResult = result ? result : '23454'\n        let transitionTime = time\n          ? time\n          : minTime && maxTime && minTime > 0 && maxTime > 0\n          ? Math.floor(Math.random() * (maxTime - minTime + 1)) + minTime\n          : Math.floor(Math.random() * (4 - 3 + 1)) + 3\n        wheelCanvas.style.transition = transitionTime + 's'\n\n        let winner = data.find((item: Array<string>) => {\n          return item[0] === freeSpinResult\n        })\n        if (!winner) {\n          winner = ['']\n        }\n        let freeSpinGifts: Array<string> = []\n        data.map((item: Array<string>) => {\n          freeSpinGifts.push(item[0])\n        })\n        let winnerIndex = freeSpinGifts.indexOf(winner[0])\n        let offset = state.winnerAngle % 360\n        state.winnerAngle =\n          state.winnerAngle +\n          2520 -\n          (360 * winnerIndex) / freeSpinGifts.length -\n          offset\n        let deg = 'rotate(' + state.winnerAngle + 'deg)'\n        wheelCanvas.style.transform = deg\n      }\n    }\n    return (\n      <div>\n        <div className={Styles['rewards-spin-game']}>\n          <div className={Styles['canvas-container']}>\n            <canvas\n              ref={wheelRef}\n              id=\"wheel\"\n              className={Styles['wheel']}\n              width='450px'\n              height='450px'\n            />\n            {!hideButton && (\n              <span\n                className={Styles['spin']}\n                onClick={() => (removeButtonEffect ? '' : handleSpin())}\n              >\n                SPIN\n              </span>\n            )}\n          </div>\n          <span className={Styles['arrow']}>\n            <Arrow />\n          </span>\n        </div>\n      </div>\n    )\n  }\n)\n\nexport default SpinAndWin\n"],
  "mappings": "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",
  "names": ["SpinAndWin", "forwardRef", "ref", "data", "hideButton", "result", "time", "minTime", "maxTime", "removeButtonEffect", "fontSize", "fontFamily", "horizantalText", "wheelRef", "useRef", "useState", "winnerAngle", "state", "useLayoutEffect", "wheelCanvas", "document", "getElementById", "isCanvas", "wheel", "getContext", "wheelX", "width", "wheelY", "height", "wheelRadius", "Math", "min", "drawWheel", "obj", "tagName", "degToRad", "deg", "PI", "list", "segment", "length", "map", "el", "i", "save", "translate", "rotate", "fillStyle", "beginPath", "moveTo", "arc", "fill", "textAlign", "font", "transform", "fillText", "restore", "useImperativeHandle", "handleSpin", "freeSpinResult", "transitionTime", "floor", "random", "style", "transition", "winner", "find", "item", "freeSpinGifts", "push", "winnerIndex", "indexOf", "offset", "React", "className", "Styles", "id", "onClick", "Arrow"]
}
